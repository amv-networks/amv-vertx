package org.amv.vertx.spring.mqtt;


import io.vertx.core.http.ClientAuth;
import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;

@Data
@ConfigurationProperties("vertx.mqtt")
public class VertxMqttProperties {
    public static final int DEFAULT_SEND_BUFFER_SIZE = -1;
    public static final int DEFAULT_RECEIVE_BUFFER_SIZE = -1;
    public static final int DEFAULT_TRAFFIC_CLASS = -1;
    public static final boolean DEFAULT_REUSE_ADDRESS = true;
    public static final boolean DEFAULT_LOG_ENABLED = false;
    public static final int DEFAULT_PORT = 1883; // Default port is 1883 for MQTT
    public static final int DEFAULT_TLS_PORT = 8883; // Default TLS port is 8883 for MQTT

    public static final int DEFAULT_MAX_MESSAGE_SIZE = -1;
    public static final String DEFAULT_HOST = "0.0.0.0";
    public static final int DEFAULT_ACCEPT_BACKLOG = -1;
    public static final String DEFAULT_CLIENT_AUTH = ClientAuth.NONE.name();
    public static final boolean DEFAULT_SNI = false;

    public static final boolean DEFAULT_TCP_NO_DELAY = true;
    public static final boolean DEFAULT_TCP_KEEP_ALIVE = false;
    public static final int DEFAULT_SO_LINGER = -1;
    public static final boolean DEFAULT_USE_POOLED_BUFFERS = false;
    public static final boolean DEFAULT_SSL = false;
    public static final int DEFAULT_IDLE_TIMEOUT = 0;
    public static final boolean DEFAULT_USE_ALPN = false;

    // max message size (variable header + payload) in bytes
    private int maxMessageSize = DEFAULT_MAX_MESSAGE_SIZE;
    // if clientid should be autogenerated (if "zero-bytes")
    private boolean isAutoClientId = true;

    private int sendBufferSize = DEFAULT_SEND_BUFFER_SIZE;
    private int receiveBufferSize = DEFAULT_RECEIVE_BUFFER_SIZE;
    private int trafficClass = DEFAULT_TRAFFIC_CLASS;
    private boolean reuseAddress = DEFAULT_REUSE_ADDRESS;
    private boolean logActivity = DEFAULT_LOG_ENABLED;

    private boolean enabled;
    private int port = DEFAULT_PORT;
    private String host = DEFAULT_HOST;
    private int acceptBacklog = DEFAULT_ACCEPT_BACKLOG;
    private String clientAuth = DEFAULT_CLIENT_AUTH;
    private boolean sni = DEFAULT_SNI;

    private boolean tcpNoDelay = DEFAULT_TCP_NO_DELAY;
    private boolean tcpKeepAlive = DEFAULT_TCP_KEEP_ALIVE;
    private int soLinger = DEFAULT_SO_LINGER;
    private boolean usePooledBuffers = DEFAULT_USE_POOLED_BUFFERS;
    private int idleTimeout = DEFAULT_IDLE_TIMEOUT;
    private boolean ssl = DEFAULT_SSL;
    private boolean useAlpn = DEFAULT_USE_ALPN;


    public ClientAuth getClientAuth() {
        return ClientAuth.valueOf(clientAuth);
    }
}
